create table
  public.banners_promocionais (
    id bigint generated always as identity not null,
    url_imagem text not null,
    link_ancora text null,
    ordem_exibicao integer not null default 0,
    ativo boolean not null default true,
    created_at timestamp with time zone not null default now(),
    constraint banners_promocionais_pkey primary key (id)
  ) tablespace pg_default;


create table
  public.categorias (
    id bigint generated always as identity not null,
    nome text not null,
    url_icone text null,
    cor_fundo text null default '#38326b'::text,
    ordem_exibicao integer not null default 0,
    created_at timestamp with time zone not null default now(),
    constraint categorias_pkey primary key (id),
    constraint categorias_nome_key unique (nome)
  ) tablespace pg_default;


create table
  public.garcons (
    id bigint generated always as identity not null,
    nome text not null,
    pin text not null,
    created_at timestamp with time zone not null default now(),
    constraint garcons_pkey primary key (id),
    constraint garcons_nome_key unique (nome)
  ) tablespace pg_default;


create table
  public.itens_pedido (
    id bigint generated always as identity not null,
    created_at timestamp with time zone not null default now(),
    pedido_id bigint null,
    produto_id bigint null,
    quantidade integer not null,
    preco_unitario numeric(10, 2) not null,
    constraint itens_pedido_pkey primary key (id),
    constraint itens_pedido_pedido_id_fkey foreign key (pedido_id) references pedidos (id) on delete cascade,
    constraint itens_pedido_produto_id_fkey foreign key (produto_id) references produtos (id)
  ) tablespace pg_default;


create table
  public.loja_config (
    id bigint not null default 1,
    created_at timestamp with time zone not null default now(),
    nome_loja text null,
    cnpj_cpf text null,
    endereco text null,
    telefone text null,
    logo_url text null,
    mensagem_rodape text null,
    logo_painel_url text null,
    logo_vitrine_url text null,
    taxa_entrega_fixa numeric(10, 2) null default 0.00,
    pin_garcom text null,
    custo_entrega_freela numeric(10, 2) null default 5.00,
    constraint loja_config_pkey primary key (id),
    constraint loja_config_singleton check ((id = 1))
  ) tablespace pg_default;


create table
  public.mesas (
    id bigint generated always as identity not null,
    numero_mesa integer not null,
    status text not null default 'LIVRE'::text,
    garcom_id bigint null,
    constraint mesas_pkey primary key (id),
    constraint mesas_numero_mesa_key unique (numero_mesa),
    constraint mesas_garcom_id_fkey foreign key (garcom_id) references garcons (id) on delete set null
  ) tablespace pg_default;


create table
  public.pedidos (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    id_pedido_publico text not null,
    nome_cliente text not null,
    whatsapp_cliente text not null,
    total numeric(10, 2) not null,
    status text not null default 'confirmado'::text,
    origem text not null default 'DELIVERY'::text,
    rua text null,
    quadra text null,
    lote text null,
    referencia text null,
    bairro text null,
    forma_pagamento text null,
    id_mesa bigint null,
    observacoes text null,
    entregador_id text null,
    garcom_id bigint null,
    constraint pedidos_pkey primary key (id),
    constraint pedidos_id_pedido_publico_key unique (id_pedido_publico),
    constraint pedidos_id_mesa_fkey foreign key (id_mesa) references mesas (id) on delete set null,
    constraint pedidos_garcom_id_fkey foreign key (garcom_id) references garcons (id) on delete set null
  ) tablespace pg_default;


create table
  public.produtos (
    id bigint generated by default as identity not null,
    created_at timestamp with time zone not null default now(),
    nome text not null,
    preco numeric(10, 2) not null,
    descricao text null,
    ingredientes text[] null,
    imagens_urls text[] null,
    ativo boolean null default true,
    curtidas integer not null default 0,
    categoria_id bigint null,
    tipo_item text not null default 'PRODUTO'::text,
    constraint produtos_pkey primary key (id),
    constraint produtos_nome_key unique (nome),
    constraint produtos_categoria_id_fkey foreign key (categoria_id) references categorias (id) on delete set null
  ) tablespace pg_default;

create index if not exists idx_produtos_tipo_item on public.produtos using btree (tipo_item) tablespace pg_default;


==========================

create view
  public.view_banners_ordenados as
select
  banners_promocionais.id,
  banners_promocionais.url_imagem,
  banners_promocionais.link_ancora,
  banners_promocionais.ordem_exibicao,
  banners_promocionais.ativo,
  banners_promocionais.created_at
from
  banners_promocionais
order by
  banners_promocionais.ordem_exibicao;



create view
  public.view_categorias_ordenadas as
select
  categorias.id,
  categorias.nome,
  categorias.url_icone,
  categorias.cor_fundo,
  categorias.ordem_exibicao,
  categorias.created_at
from
  categorias
order by
  categorias.ordem_exibicao;


create view
  public.view_consulta_cliente as
select
  p.id,
  p.created_at,
  p.id_pedido_publico,
  p.nome_cliente,
  p.status
from
  pedidos p;


create view
  public.view_dashboard_pedidos_dia as
select
  p.total,
  p.created_at,
  (
    select
      json_agg(
        json_build_object(
          'item',
          prod.nome,
          'quantidade',
          ip.quantidade,
          'tipo_item',
          prod.tipo_item
        )
      ) as json_agg
    from
      itens_pedido ip
      join produtos prod on ip.produto_id = prod.id
    where
      ip.pedido_id = p.id
  ) as itens_pedido
from
  pedidos p
where
  (
    p.created_at at time zone 'America/Sao_Paulo'::text
  )::date = (now() at time zone 'America/Sao_Paulo'::text)::date
  and p.status <> 'CANCELADO'::text;


create view
  public.view_financeiro_detalhado as
select
  p.id as pedido_id,
  p.id_pedido_publico,
  (
    p.created_at at time zone 'America/Sao_Paulo'::text
  )::date as data_local,
  p.created_at,
  p.nome_cliente,
  p.origem,
  p.forma_pagamento,
  p.total,
  g.nome as garcom_responsavel,
  p.entregador_id,
  coalesce(
    (
      select
        json_agg(
          json_build_object(
            'item',
            prod.nome,
            'quantidade',
            ip.quantidade,
            'preco_unitario',
            ip.preco_unitario
          )
        ) as json_agg
      from
        itens_pedido ip
        join produtos prod on ip.produto_id = prod.id
      where
        ip.pedido_id = p.id
    ),
    '[]'::json
  ) as itens_pedido
from
  pedidos p
  left join mesas m on p.id_mesa = m.id
  left join garcons g on m.garcom_id = g.id
where
  p.status = 'ENTREGUE'::text
order by
  p.created_at desc;


create view
  public.view_garcons_resumo as
select
  g.id,
  g.nome,
  g.pin,
  string_agg(
    m.numero_mesa::text,
    ', '::text
    order by
      m.numero_mesa
  ) as mesas_atribuidas
from
  garcons g
  left join mesas m on g.id = m.garcom_id
group by
  g.id,
  g.nome,
  g.pin
order by
  g.nome;


create view
  public.view_loja_config as
select
  loja_config.id,
  loja_config.created_at,
  loja_config.nome_loja,
  loja_config.cnpj_cpf,
  loja_config.endereco,
  loja_config.telefone,
  loja_config.logo_url,
  loja_config.mensagem_rodape,
  loja_config.logo_painel_url,
  loja_config.logo_vitrine_url,
  loja_config.taxa_entrega_fixa,
  loja_config.pin_garcom,
  loja_config.custo_entrega_freela
from
  loja_config
where
  loja_config.id = 1;


create view
  public.view_mesas_com_garcom as
select
  m.id,
  m.numero_mesa,
  m.status,
  m.garcom_id,
  g.nome as nome_garcom
from
  mesas m
  left join garcons g on m.garcom_id = g.id
order by
  m.numero_mesa;


create view
  public.view_painel_pedidos as
select
  p.id,
  p.created_at,
  p.id_pedido_publico,
  p.nome_cliente,
  p.whatsapp_cliente,
  p.total,
  p.status,
  p.origem,
  p.rua,
  p.quadra,
  p.lote,
  p.referencia,
  p.bairro,
  p.forma_pagamento,
  (
    select
      json_agg(
        json_build_object(
          'id',
          ip.id,
          'quantidade',
          ip.quantidade,
          'item',
          prod.nome,
          'produto_id',
          prod.id
        )
      ) as json_agg
    from
      itens_pedido ip
      left join produtos prod on ip.produto_id = prod.id
    where
      ip.pedido_id = p.id
  ) as itens_pedido
from
  pedidos p
order by
  p.created_at desc;


create view
  public.view_pedidos_ativos as
select
  p.id,
  p.created_at,
  p.id_pedido_publico,
  p.nome_cliente,
  p.whatsapp_cliente,
  (
    select
      coalesce(
        sum(
          ip_sum.quantidade::numeric * ip_sum.preco_unitario
        ),
        0::numeric
      ) as "coalesce"
    from
      itens_pedido ip_sum
    where
      ip_sum.pedido_id = p.id
  ) as total,
  p.status,
  p.origem,
  p.rua,
  p.quadra,
  p.lote,
  p.referencia,
  p.bairro,
  p.forma_pagamento,
  p.id_mesa,
  p.observacoes,
  g.nome as garcom_responsavel,
  (
    select
      coalesce(
        json_agg(
          json_build_object(
            'id',
            ip.id,
            'produto_id',
            ip.produto_id,
            'quantidade',
            ip.quantidade,
            'preco_unitario',
            ip.preco_unitario,
            'item',
            prod.nome,
            'tipo_item',
            prod.tipo_item
          )
          order by
            ip.id
        ),
        '[]'::json
      ) as "coalesce"
    from
      itens_pedido ip
      join produtos prod on ip.produto_id = prod.id
    where
      ip.pedido_id = p.id
  ) as itens_pedido
from
  pedidos p
  left join mesas m on p.id_mesa = m.id
  left join garcons g on m.garcom_id = g.id
where
  lower(p.status) <> all (array['entregue'::text, 'cancelado'::text]);


create view
  public.view_pedidos_consulta as
select
  pedidos.id,
  pedidos.created_at,
  pedidos.id_pedido_publico,
  pedidos.nome_cliente,
  pedidos.whatsapp_cliente,
  pedidos.total,
  pedidos.status,
  pedidos.origem
from
  pedidos;


create view
  public.view_pedidos_finalizados as
select
  p.id,
  (
    p.created_at at time zone 'America/Sao_Paulo'::text
  )::date as data_local,
  p.created_at,
  p.id_pedido_publico,
  p.nome_cliente,
  p.whatsapp_cliente,
  p.total,
  p.status,
  p.origem,
  p.rua,
  p.quadra,
  p.lote,
  p.referencia,
  p.bairro,
  p.forma_pagamento,
  g.nome as garcom_responsavel,
  coalesce(
    json_agg(
      json_build_object('quantidade', ip.quantidade, 'item', prod.nome)
    ) filter (
      where
        ip.id is not null
    ),
    '[]'::json
  ) as itens_pedido
from
  pedidos p
  left join itens_pedido ip on p.id = ip.pedido_id
  left join produtos prod on ip.produto_id = prod.id
  left join mesas m on p.id_mesa = m.id
  left join garcons g on m.garcom_id = g.id
where
  lower(p.status) = 'entregue'::text
group by
  p.id,
  g.nome
order by
  p.created_at desc;


create view
  public.view_produtos_com_categoria as
select
  p.id,
  p.nome,
  p.preco,
  p.descricao,
  p.ingredientes,
  p.imagens_urls,
  p.ativo,
  p.curtidas,
  p.created_at,
  p.categoria_id,
  c.nome as nome_categoria,
  p.tipo_item
from
  produtos p
  left join categorias c on p.categoria_id = c.id;


create view
  public.view_produtos_vitrine as
select
  view_produtos_com_categoria.id,
  view_produtos_com_categoria.nome,
  view_produtos_com_categoria.preco,
  view_produtos_com_categoria.descricao,
  view_produtos_com_categoria.ingredientes,
  view_produtos_com_categoria.imagens_urls,
  view_produtos_com_categoria.ativo,
  view_produtos_com_categoria.curtidas,
  view_produtos_com_categoria.created_at,
  view_produtos_com_categoria.categoria_id,
  view_produtos_com_categoria.nome_categoria,
  view_produtos_com_categoria.tipo_item
from
  view_produtos_com_categoria
where
  view_produtos_com_categoria.tipo_item = 'PRODUTO'::text
  and view_produtos_com_categoria.ativo = true;